name: Dosyaları Yeniden Adlandır (Manuel)

on:
  workflow_dispatch:
    inputs:
      root_directory:
        description: 'İşlemin başlayacağı kök dizin (örn: toptubelist). Boş bırakılırsa repository kökü kullanılır.'
        required: false
        default: '.' # Varsayılan olarak repository'nin kökü

jobs:
  rename-files:
    runs-on: ubuntu-latest

    steps:
    - name: Depoyu Çıkart
      uses: actions/checkout@v4 # Repository'yi aksiyon ortamına klonlar

    - name: Python Ortamını Kur
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Python 3'ün herhangi bir sürümünü kullan

    - name: Dosya Yeniden Adlandırma Betiğini Çalıştır
      run: |
        # Kök dizini belirle
        # Eğer input boşsa veya '.' ise, mevcut dizini kullan.
        # Aksi takdirde, input'tan gelen yolu kullan.
        ROOT_DIR="${{ github.event.inputs.root_directory }}"
        if [ -z "$ROOT_DIR" ] || [ "$ROOT_DIR" == "." ]; then
          # Eğer rename_files.py toptubelist'in içindeyse ve toptubelist'i hedefliyorsak,
          # betiği toptubelist klasörünün kendisinde çalıştırmalıyız.
          # Varsayalım ki rename_files.py direkt olarak toptubelist klasörünün içinde:
          # Örneğin: your_repo/toptubelist/rename_files.py
          # Bu durumda, betik otomatik olarak toptubelist'i kök dizin olarak algılar.
          # Eğer rename_files.py, toptubelist'in bir üstünde ise ve toptubelist'i hedefliyorsak:
          # (Örn: your_repo/rename_files.py ve your_repo/toptubelist/)
          # O zaman ROOT_DIR'i manuel olarak ayarlamamız gerekebilir.
          
          # En güvenli yaklaşım, rename_files.py'nin nerede olduğunu bilmek ve ona göre path vermek.
          # Varsayım: rename_files.py, toptubelist klasörünün içinde.
          # Bu nedenle, betiğin kendisi toptubelist'in yolunu otomatik bulacaktır.
          # Betiğin kendisini çalıştırdığımızda, os.path.dirname(os.path.abspath(__file__))
          # betiğin çalıştığı dizini (yani toptubelist'i) verecektir.
          # Yani, ROOT_DIR'i Python betiğinin içinden ayarlamak daha mantıklı.

          # Python betiğinin konumunu varsayarak çalıştırıyoruz
          # rename_files.py'nin toptubelist/ içinde olduğunu varsayıyoruz
          # GitHub Actions environment'ında, repository'nin kökünde çalışırız.
          # Bu yüzden, toptubelist/rename_files.py şeklinde çağırmalıyız.
          
          echo "Kök dizin varsayılan olarak depolama alanı kökü olarak ayarlandı."
          python toptubelist/rename_files.py # toptubelist klasörünün içindeki betiği çalıştır
        else
          echo "Belirtilen kök dizin: $ROOT_DIR"
          python "$ROOT_DIR/rename_files.py" # Belirtilen kök dizin içindeki betiği çalıştır
        fi

    - name: Değişiklikleri Taahhüt Et ve İt
      env:
        GIT_COMMITTER_NAME: GitHub Actions Bot # Git kullanıcısı adını ayarla
        GIT_COMMITTER_EMAIL: actions@github.com # Git kullanıcısı e-postasını ayarla
      run: |
        git config user.name "${{ env.GIT_COMMITTER_NAME }}"
        git config user.email "${{ env.GIT_COMMITTER_EMAIL }}"
        git add .
        git diff-index --quiet HEAD || git commit -m "Dosya adları yeniden adlandırıldı [Otomatik]"
        git push
      # Bu adım, GitHub Actions botu olarak bir taahhüt (commit) oluşturup değişiklikleri ana branch'e geri iter.
      # Otomatik yeniden adlandırma sonrası değişikliklerin depoya yansıması için gereklidir.
